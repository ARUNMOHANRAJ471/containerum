// Code generated by fileb0x at "2018-10-04 18:01:13.512386294 +0300 MSK m=+0.004629927" from config file "b0x.toml" DO NOT EDIT.
// modification hash(8c4a93c18edf9c8d6f990473ad1a4626.09cbbaf121738d9f6b7ef3f2aa070278)

package help

import (
	"bytes"
	"compress/gzip"
	"context"
	"io"
	"net/http"
	"os"
	"path"

	"golang.org/x/net/webdav"
)

var (
	// CTX is a context for webdav vfs
	CTX = context.Background()

	// FS is a virtual memory file system
	FS = webdav.NewMemFS()

	// Handler is used to server files through a http handler
	Handler *webdav.Handler

	// HTTP is the http file system
	HTTP http.FileSystem = new(HTTPFS)
)

// HTTPFS implements http.FileSystem
type HTTPFS struct{}

// FileDownloadYaml is "download.yaml"
var FileDownloadYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x5c\xcd\xb1\x8d\xc3\x30\x0c\x46\xe1\x5e\x53\xfc\x03\x9c\x17\x70\x7d\x7b\x04\xb4\xc8\x58\x82\x25\x51\xa0\x68\x3b\x01\x32\x7c\x0a\x27\x4d\xfa\x87\xf7\x85\x91\xd4\x7c\xc6\xbf\x9e\xad\x28\x31\x62\x22\x73\x30\x39\xc1\x15\x9c\x2d\x14\x6d\xeb\x0c\xbc\x02\x7e\xaa\x01\xb2\x98\xf2\x21\x38\xb3\x27\x50\x29\x2c\x7d\x80\x1a\x63\x6f\x9d\xe2\x36\xe0\x49\xea\xe7\xf3\x87\x6e\x7a\x64\x16\xc6\xf2\xc4\x34\x71\x36\xdc\x0b\xad\x41\x1e\x54\x7b\x91\x31\x07\x60\x82\xd4\x85\x6c\x03\x7f\xa5\x2b\x8c\xda\x9c\x72\x13\xdb\xeb\xed\xb2\xdf\x01\x00\x00\xff\xff\x44\xa5\x1e\xf9\xb9\x00\x00\x00")

// FileInstallYaml is "install.yaml"
var FileInstallYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x04\xc0\xcb\x0d\x84\x30\x0c\x04\xd0\xfb\x56\x31\x75\x6c\x07\x88\x2a\x82\x19\x02\xc2\xb2\x23\x7f\xfa\xe7\xe5\xed\x51\x7f\x6c\x96\x35\x54\xb1\x86\xbc\x63\x32\x51\x8e\x15\x14\xb7\xeb\x99\x1d\x3c\xb1\xf7\xc1\x30\x16\x13\xa2\x9d\xc5\xf8\x7d\x01\x00\x00\xff\xff\xa4\xec\x43\x3f\x3c\x00\x00\x00")

// FileRootYaml is "root.yaml"
var FileRootYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\x7c\xd0\x31\x0e\x43\x21\x0c\x03\xd0\xbd\xa7\xf0\x05\x2a\xef\x3d\x4b\x44\xc7\x2e\x55\xbb\x31\xf9\xf0\x5f\x49\x3e\x5f\x82\xa0\xef\x31\x4f\x18\xc2\xf7\xff\xfb\xbc\xa0\x07\x22\xef\x9a\x14\xe2\xb9\x86\x79\x88\x20\xa6\xf8\x20\x88\xe0\xd4\x94\xe2\xa4\x72\x11\x84\x41\xca\x9a\x76\xd6\x69\xa1\x06\xc2\xb6\xc4\x70\x6d\x48\xb8\x23\x98\xaf\x40\x2b\x85\x3e\xef\x7e\x42\xe3\x06\x5e\xcf\xe8\xf9\x04\x63\x0e\x86\xcc\x5b\x09\x0a\xb0\xfa\xad\xe4\x11\x00\x00\xff\xff\x7e\x8d\x03\x84\x7a\x01\x00\x00")

func init() {
	err := CTX.Err()
	if err != nil {
		panic(err)
	}

	var f webdav.File

	var rb *bytes.Reader
	var r *gzip.Reader

	rb = bytes.NewReader(FileDownloadYaml)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "download.yaml", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileInstallYaml)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "install.yaml", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	rb = bytes.NewReader(FileRootYaml)
	r, err = gzip.NewReader(rb)
	if err != nil {
		panic(err)
	}

	err = r.Close()
	if err != nil {
		panic(err)
	}

	f, err = FS.OpenFile(CTX, "root.yaml", os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0777)
	if err != nil {
		panic(err)
	}

	_, err = io.Copy(f, r)
	if err != nil {
		panic(err)
	}

	err = f.Close()
	if err != nil {
		panic(err)
	}

	Handler = &webdav.Handler{
		FileSystem: FS,
		LockSystem: webdav.NewMemLS(),
	}

}

// Open a file
func (hfs *HTTPFS) Open(path string) (http.File, error) {

	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	return f, nil
}

// ReadFile is adapTed from ioutil
func ReadFile(path string) ([]byte, error) {
	f, err := FS.OpenFile(CTX, path, os.O_RDONLY, 0644)
	if err != nil {
		return nil, err
	}

	buf := bytes.NewBuffer(make([]byte, 0, bytes.MinRead))

	// If the buffer overflows, we will get bytes.ErrTooLarge.
	// Return that as an error. Any other panic remains.
	defer func() {
		e := recover()
		if e == nil {
			return
		}
		if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {
			err = panicErr
		} else {
			panic(e)
		}
	}()
	_, err = buf.ReadFrom(f)
	return buf.Bytes(), err
}

// WriteFile is adapTed from ioutil
func WriteFile(filename string, data []byte, perm os.FileMode) error {
	f, err := FS.OpenFile(CTX, filename, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, perm)
	if err != nil {
		return err
	}
	n, err := f.Write(data)
	if err == nil && n < len(data) {
		err = io.ErrShortWrite
	}
	if err1 := f.Close(); err == nil {
		err = err1
	}
	return err
}

// WalkDirs looks for files in the given dir and returns a list of files in it
// usage for all files in the b0x: WalkDirs("", false)
func WalkDirs(name string, includeDirsInList bool, files ...string) ([]string, error) {
	f, err := FS.OpenFile(CTX, name, os.O_RDONLY, 0)
	if err != nil {
		return nil, err
	}

	fileInfos, err := f.Readdir(0)
	if err != nil {
		return nil, err
	}

	err = f.Close()
	if err != nil {
		return nil, err
	}

	for _, info := range fileInfos {
		filename := path.Join(name, info.Name())

		if includeDirsInList || !info.IsDir() {
			files = append(files, filename)
		}

		if info.IsDir() {
			files, err = WalkDirs(filename, includeDirsInList, files...)
			if err != nil {
				return nil, err
			}
		}
	}

	return files, nil
}
